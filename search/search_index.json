{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OntologyBrowser Documentation","text":"<p>This tool provides a graphical user interface that allows the creation and editing of ontologies.</p> <p>Further, it is able to generate an Input Model from an existing ontology, that can then be used as input for the combinatorial-testing-tool ACTS</p>"},{"location":"#build-run","title":"Build &amp; Run","text":"<p>The tool is a monolithic application written in java using maven, and utilizing javafx as frontend-library.</p> <p>To build an executable jar file, run</p> <pre><code> ./mvnw clean install:install-file package\n</code></pre> <p>The <code>install:install-file</code> is required to install the <code>plantuml-1.2025.3.jar</code> located in <code>lib</code> to the local maven repository, so that it is available for the build. This is required as the dependency is not available in any public maven repository.</p> <p>The jar file supports two ways of exdecution:</p>"},{"location":"#full-ontologybrowser-with-gui","title":"Full OntologyBrowser with GUI","text":"<p>Simply execute the jar without additional parameters by running</p> <pre><code>java -jar target/OntologyBrowser-1.5.jar\n</code></pre>"},{"location":"#export-input-model-without-gui","title":"Export Input Model without GUI","text":"<p>The jar can also be used to directly create an input model from the command line.</p> <p>Therefore, following 4 parameters need to be passed:</p> <ol> <li>Path to the ontology json file</li> <li>Name of the library within the ontology</li> <li>Name of the system within the library</li> <li>Path to the output file</li> </ol> <pre><code>java -jar ontologybrowser.jar &lt;input&gt; &lt;library&gt; &lt;system&gt; &lt;output&gt;\n</code></pre>"},{"location":"user_interface/object_creation/","title":"Creation of Objects","text":"<p>Objects can be created using the <code>+</code> buttons in the respective column. In addition, all the five list views have an <code>Add...</code> button in the context menu, that is equivalent to the <code>+</code>.</p> <p>Depending on the type of object, a specific dialog window asking for properties will appear.</p> <p>All types require a name, and allow for an optional comment.</p> <p>Names must be unique in the context of the encapsulating objects. Library-names must be unique globally, while system-names only need to differ inside the same library, etc.</p> <p></p>"},{"location":"user_interface/object_creation/attributes/","title":"Creating an Attribute","text":"<p>Entities and Relations can have attributes. When one of such Objects is selected, the bottom right panel will show the Attributes section. Here, attributes can be created by using the <code>+</code> button. This will open up a popup to specify the attribute. This window contains a choice box to select one of three available attribute types.</p> <p></p>"},{"location":"user_interface/object_creation/attributes/#attribute-types","title":"Attribute Types","text":"<p>There are three different attribute types that can be selected using the <code>Attribute Type</code> choice box:</p>"},{"location":"user_interface/object_creation/attributes/#boolean","title":"Boolean","text":"<p>This is the simplest type, as the possible values are already predefined by definition (<code>true</code>, <code>false</code>).</p> <p></p>"},{"location":"user_interface/object_creation/attributes/#enumeration","title":"Enumeration","text":"<p>For an enum attribute, the possible options can be entered manually to a text field. Each line will be considered as one possible string value.</p> <p></p>"},{"location":"user_interface/object_creation/attributes/#integer-number-range","title":"Integer (Number Range)","text":"<p>The integer type can be configured by providing a minimum, maximum and interval value</p> <p></p>"},{"location":"user_interface/object_creation/constraints/","title":"Creating a Constraint","text":"<p>Custom constraints can be added to restrict values of Attributes of Entities of a System. Currently, constraints can be started from a single simple constraint, and expanded in a binary-tree structure.</p> <p>When creating a new constraint, the main window looks like the following:</p> <p></p> <p>Here, a new constraint can be started by using the <code>New Root</code> button bottom left.</p> <p>Note</p> <p>Already created constraints can also be edited afterwards using the <code>Edit</code> button. For more information, see Editing Constraints</p>"},{"location":"user_interface/object_creation/constraints/#simple-constraint-creation","title":"Simple Constraint Creation","text":"<p>This will open the <code>Add simple Constraint</code> popup:</p> <p></p> <p>A simple constraint consists of two terms and a relational operator. Attributes used in both terms need to be of the same attribute type (boolean, enumeration, integer), and the available relational operators depend on the used type. Attributes can be added using the two <code>+</code> buttons, and the operator can be selected using the choice box.</p> <p>For more information on terms see Term Types below.</p>"},{"location":"user_interface/object_creation/constraints/#expanding-simple-constraints","title":"Expanding Simple Constraints","text":"<p>After the root has been created, it will be visible in the constraint area of the root window:</p> <p></p> <p>From this point on, the constraint can be arbitrarily expanded (made composite) by selecting it (by highlighting it via mouseclick), and using the <code>Expand Left</code> and <code>Expand Right</code> buttons. This buttons will open up the <code>Make Composite constraint</code> popup, with the existing constraint being on the left or right side, depending on the used button. The following screenshot shows the example after using <code>Expand Right</code>:</p> <p></p> <p>Here, a boolean operator (<code>&amp;&amp;</code>, <code>||</code>, or <code>=&gt;</code>) can be selected to combine the existing constraint with a second new one. The new constraint can be created using the <code>+</code>, button, which will open up the <code>Add simple Constraint</code> popup.</p> <p>After the constraint has been expanded, it can be seen in the root <code>Add Constraint</code> window. Here, the composite constraint is wrapped in parentheses. For easier overview on complex constraints, the parentheses and operator of a single composite constraint are colored the same, and every additional composite constraint will use a different, randomly selected color.</p> <p>Additionally, composite constraints can be selected and expanded the same way as simple constraints, by selecting the parentheses or operator. Already expanded single constraints can also be further expanded, allowing creation of arbitrarily complex constraints.</p> <p></p> <p></p>"},{"location":"user_interface/object_creation/constraints/#term-types","title":"Term Types","text":"<p>There are four different types of terms:</p>"},{"location":"user_interface/object_creation/constraints/#parameter","title":"Parameter","text":"<p>A parameter term is a single attribute of any entity in the system. The system is predefined by the selection in the initial <code>Add Constraint</code> popup.</p> <p>Note</p> <p>If the term in creation is the second term of the simple constraint, the available attributes might be limited. This is because attributes of both terms must have the same type, and the available attributes will be filtered by the type of the already existing term.</p> <p></p>"},{"location":"user_interface/object_creation/constraints/#value","title":"Value","text":"<p>The value term is the simplest type, as it only consists of a custom value that can be entered to the text field.</p> <p>Warning</p> <p>The text field allows unrestricted use of characters and numerals. This type should only be used in accordance with the other term used in the same constraint, to avoid yielding undesired and unexpected results.</p> <p></p>"},{"location":"user_interface/object_creation/constraints/#arithmetic-parameter","title":"Arithmetic Parameter","text":"<p>This type is a combination of two attributes, that are connected by an arithmetic operation.</p> <p>Note</p> <p>As this type uses arithmetic parameters, it can only be used for attributes of type integer (number range).</p> <p></p>"},{"location":"user_interface/object_creation/constraints/#arithmetic-value","title":"Arithmetic Value","text":"<p>The arithmetic value type combines an attribute and a custom value, using an arithmetic operation.</p> <p>Note</p> <p>As this type uses arithmetic parameters, it can only be used for attributes of type integer (number range).</p> <p>Similarly, the custom value text field should only be used with numerical values.</p> <p></p>"},{"location":"user_interface/object_creation/entities/","title":"Creating an Entity","text":"<p>Entities are part of a system, thus a parent system is required. As systems are part of libraries, the <code>System</code> choice box will contain all systems of the selected library.</p> <p>As there also can be inheritance relationships between entities of the same system, a super entity can be specified upon entity creation. The choice box will contain all existing entities of the selected system.</p> <p></p>"},{"location":"user_interface/object_creation/libraries/","title":"Creating a Library","text":"<p>Libraries are the top-level and simplest objects in an ontology, and they only contain the name as a property.</p> <p></p>"},{"location":"user_interface/object_creation/relations/","title":"Creating a Relation","text":"<p>Relations can be created between two entities of the same system. The selection of a parent library will update the content of the <code>System</code> choice box, and the selection thereof then again updates the content of the two entity choice boxes. </p> <p>The left and right cardinality fields represent the minimum and maximum arity, respectively: \"One Entity A can have at least 'min' and at most 'max' Entity B's\"</p> <p></p>"},{"location":"user_interface/object_creation/systems/","title":"Creating a System","text":"<p>As each system is part of a library, a parent library is a required parameter, in addition to the name.</p> <p></p>"},{"location":"user_interface/object_editing/","title":"Editing of Objects","text":"<p>All existing objects can be edited using <code>Edit...</code> the context menu, which can be accessed by right-clicking any existing object in the browser.</p> <p>Depending on the type of object to be edited, a different popup window will open up.</p> <p>Note that objects currently cannot be moved between parent-objects (e.g. systems between libraries, entities/relations/constraints between systems).</p> <p></p>"},{"location":"user_interface/object_editing/attributes/","title":"Editing an Attribute","text":"<p>Attributes can be edited as all other object, by using <code>Edit...</code> in the context menu of the attribute list.</p> <p></p> <p>This will open up the <code>Edit Attribute</code> popup window. It is equivalent to <code>Add Attribute</code>, except that the existing attribute will be modified instead of creating a new one.</p> <p></p>"},{"location":"user_interface/object_editing/constraints/","title":"Editing a Constraint","text":"<p>When modifying an existing constraint, the main window looks the same as when creating a new one, with the existing constraint visible in the constraint view:</p> <p></p> <p>From here on, parts of the constraint can be edited by selecting them and pressing <code>Edit</code>.</p> <p></p> <p></p>"},{"location":"user_interface/object_editing/constraints/#editing-a-simple-constraint","title":"Editing a simple constraint","text":"<p>When using <code>Edit</code> with a simple constraint selected, the <code>Edit simple constraint</code> popup will open up for the selected constraint.</p> <p>In the popup directly, only the relational operator can be changed. The terms can either be overwritten with new ones by using the <code>+</code> buttons, or edited by using <code>Edit</code> in the context menu that opens by right-clicking a term. Using <code>Edit</code> on a term opens up another window, see editing a term below.</p> <p></p>"},{"location":"user_interface/object_editing/constraints/#editing-a-term","title":"Editing a term","text":"<p>When using <code>Edit</code> on a term, the <code>Edit term</code> window will open up. This allows full modification of the selected term, similar to creating a new one during constraint creation.</p> <p></p>"},{"location":"user_interface/object_editing/constraints/#editing-a-composite-constraint","title":"Editing a composite constraint","text":"<p>When using <code>Edit</code> while a composite constraint is selected, the <code>Edit composite constraint</code> window will open op.</p> <p>This offers limited functionality, as it only allows changing the boolean operator and reducing the constraint by ticking one of the two checkboxes. This will remove the boolean operator and one of the two inner constraints,  depending on the selection. For editing the inner constraints, select them directly in the root <code>Edit constraint</code> window.</p> <p></p>"},{"location":"user_interface/object_editing/entities/","title":"Editing an Entity","text":"<p>Existing entities currently cannot be moved between systems, as this would break existing relations and constraints. Thus, the system and library selection is locked.</p> <p>However, the super entity and name can be changed:\u201a</p> <p>.</p>"},{"location":"user_interface/object_editing/libraries/","title":"Editing a Library","text":"<p>As libraries are the simplest object and only contain a name and an optional comment, these are the only properties that can be changed.</p> <p></p>"},{"location":"user_interface/object_editing/relations/","title":"Editing a Relation","text":"<p>Like systems, relations cannot be moved between systems/libraries.</p> <p>Thus, only the two entities, cardinalities and the name can be changed:</p> <p></p>"},{"location":"user_interface/object_editing/systems/","title":"Editing a System","text":"<p>As existing systems currently cannot be moved between libraries, only the name can be changed.</p> <p></p>"},{"location":"user_interface/overview/","title":"Overview","text":"<p>The general interface of the browser looks like the following:  When an object is selected, all further views will show the respective contained objects.</p> <p>When for example a Library is selected, the Systems list will show all existing Systems in this Library. The same applies to a selected System, where contained Entities, Relations and Constraints are shown.</p> <p>The bottom left area shows details about the selected Object.</p> <p>When an Entity or Relation is selected, the bottom right area will show the Attributes of the respective Objects, and allow generation and modification of Attributes.</p>"},{"location":"user_interface/overview/#ontology-structure","title":"Ontology Structure","text":"<ul> <li>Libraries<ul> <li>Systems<ul> <li>Entities<ul> <li>Attributes</li> </ul> </li> <li>Relations<ul> <li>Attributes</li> </ul> </li> <li>Constraints</li> </ul> </li> </ul> </li> </ul>"},{"location":"user_interface/overview/export_menu/","title":"Export menu","text":""},{"location":"user_interface/overview/export_menu/#input-model","title":"Input Model","text":"<p>This option allows exporting a system as a text file containing an input model, that can then be used as input for the combinatorial-testing-tool ACTS.</p> <p>Pressing <code>Export</code> will open up a file selector that allows entering a filename or selecting an existing text file for overwriting.</p> <p>Afterwards, a popup shows whether the generation was successful, and the runtime of the algorithm.</p> <p></p>"},{"location":"user_interface/overview/export_menu/#uml-diagram","title":"UML Diagram","text":"<p>This option allows the generation of a UML diagram from an existing system in the form of a png image. It will contain the entities with all relation, but does not contain any constraints.</p> <p></p> <p>For example, the UML of a simple system could look like the following:</p> <p></p>"},{"location":"user_interface/overview/file_menu/","title":"File Menu","text":"<p>The <code>File</code> menu in the top menu bar contains five options:</p>"},{"location":"user_interface/overview/file_menu/#new","title":"New","text":"<p>Clears all content and closes the current opened file.</p>"},{"location":"user_interface/overview/file_menu/#open","title":"Open...","text":"<p>Opens a file chooser, where an existing ontology json file can be opened.</p>"},{"location":"user_interface/overview/file_menu/#import","title":"Import...","text":"<p>Opens a file chooser to allow selecting an existing ontology json. All contents of the selected file will be imported and added to the file that is currently opened in the browser. Allows merging multiple files, the one selected for import will remain unchanged.</p>"},{"location":"user_interface/overview/file_menu/#save","title":"Save","text":"<p>Saves all changes made in the browser to the currently open file. When no file is opened, for example when creating a new ontology, <code>Save As...</code> is used instead.</p>"},{"location":"user_interface/overview/file_menu/#save-as","title":"Save As...","text":"<p>Opens a file chooser to enter a filename to create a new file, or select an existing json to overwrite, where the current ontology will be saved to. The selected file will then be set as the currently opened file in the browser.</p>"}]}